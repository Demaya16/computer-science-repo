import React, { useState, useEffect } from 'react';
import { LineChart, Line, PieChart, Pie, Cell, CartesianGrid, XAxis, YAxis, Tooltip, Legend, BarChart, Bar } from 'recharts';
import { AlertTriangle, ThermometerSun, Zap, Server, ArrowDown, ArrowUp, RefreshCcw, Shield } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

const DataCenterDashboard = () => {
  const [currentTime, setCurrentTime] = useState(new Date().toLocaleTimeString());
  const [selectedMetric, setSelectedMetric] = useState(null);
  const [autoRefresh, setAutoRefresh] = useState(true);

  const metrics = {
    power: {
      current: 892,
      distribution: [
        { name: 'Cooling', value: 35 },
        { name: 'Compute', value: 45 },
        { name: 'Network', value: 15 },
        { name: 'Other', value: 5 }
      ],
      history: Array.from({ length: 6 }, (_, i) => ({
        time: `${i * 4}:00`,
        value: 850 + Math.random() * 100
      }))
    },
    cooling: {
      current: 72,
      units: [
        { id: 1, temp: 71, humidity: 44, status: 'normal' },
        { id: 2, temp: 74, humidity: 46, status: 'warning' },
        { id: 3, temp: 70, humidity: 45, status: 'normal' }
      ],
      history: Array.from({ length: 6 }, (_, i) => ({
        time: `${i * 4}:00`,
        temp: 70 + Math.random() * 5,
        humidity: 44 + Math.random() * 3
      }))
    },
    network: {
      current: 78,
      traffic: Array.from({ length: 6 }, (_, i) => ({
        time: `${i * 4}:00`,
        in: 40 + Math.random() * 40,
        out: 35 + Math.random() * 35
      })),
      devices: [
        { name: 'Core Switch 1', status: 'active', load: 72 },
        { name: 'Core Switch 2', status: 'active', load: 68 },
        { name: 'Router 1', status: 'active', load: 65 }
      ]
    },
    security: {
      current: 95,
      accessEvents: Array.from({ length: 6 }, (_, i) => ({
        time: `${i * 4}:00`,
        authorized: Math.floor(Math.random() * 20),
        unauthorized: Math.floor(Math.random() * 3)
      })),
      zones: [
        { name: 'Server Room A', status: 'secure', lastAccess: '10:30 AM' },
        { name: 'Power Room', status: 'secure', lastAccess: '09:45 AM' },
        { name: 'Network Ops', status: 'active', lastAccess: '11:15 AM' }
      ],
      recentAlerts: [
        { id: 1, type: 'Access Granted', severity: 'normal', location: 'Main Entrance', time: '11:30 AM', user: 'John Doe' },
        { id: 2, type: 'Failed Access', severity: 'warning', location: 'Server Room B', time: '11:15 AM', user: 'Unknown' },
        { id: 3, type: 'Door Held Open', severity: 'warning', location: 'Loading Dock', time: '10:45 AM', user: 'System Alert' },
        { id: 4, type: 'Access Granted', severity: 'normal', location: 'Network Room', time: '10:30 AM', user: 'Jane Smith' }
      ]
    }
  };

  useEffect(() => {
    const timer = setInterval(() => {
      if (autoRefresh) {
        setCurrentTime(new Date().toLocaleTimeString());
      }
    }, 5000);
    return () => clearInterval(timer);
  }, [autoRefresh]);

  const ChartContainer = ({ children, title }) => (
    <div className="bg-white p-4 rounded-lg border h-[300px]">
      <h3 className="text-lg font-semibold mb-4">{title}</h3>
      <div className="h-[220px] flex items-center justify-center">
        {children}
      </div>
    </div>
  );

  const MetricCard = ({ icon: Icon, title, value, unit, status, trend, trendValue }) => (
    <div 
      className={`p-4 rounded-lg border cursor-pointer hover:shadow-lg ${
        status === 'warning' ? 'bg-yellow-50 border-yellow-200' : 'bg-green-50 border-green-200'
      }`}
      onClick={() => setSelectedMetric(title.toLowerCase())}
    >
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Icon size={24} className={status === 'warning' ? 'text-yellow-500' : 'text-green-500'} />
          <div>
            <h3 className="text-sm font-medium text-gray-600">{title}</h3>
            <p className="text-2xl font-bold">{value}<span className="text-sm ml-1">{unit}</span></p>
          </div>
        </div>
        {trend && (
          <div className={`flex items-center ${trend === 'up' ? 'text-red-500' : 'text-green-500'}`}>
            {trend === 'up' ? <ArrowUp size={16} /> : <ArrowDown size={16} />}
            <span className="text-sm ml-1">{trendValue}%</span>
          </div>
        )}
      </div>
    </div>
  );

  const DetailPanel = ({ type }) => {
    const data = metrics[type];
    const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];

    if (type === 'power') {
      return (
        <div className="grid grid-cols-2 gap-4 mt-4">
          <ChartContainer title="Power Distribution">
            <PieChart width={280} height={220}>
              <Pie
                data={data.distribution}
                cx="50%"
                cy="50%"
                innerRadius={50}
                outerRadius={70}
                paddingAngle={5}
                dataKey="value"
              >
                {data.distribution.map((entry, index) => (
                  <Cell key={index} fill={COLORS[index % COLORS.length]} />
                ))}
              </Pie>
              <Tooltip />
              <Legend verticalAlign="bottom" height={36} />
            </PieChart>
          </ChartContainer>
          <ChartContainer title="Power Trend">
            <LineChart width={280} height={220} data={data.history}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="time" />
              <YAxis />
              <Tooltip />
              <Line type="monotone" dataKey="value" stroke="#8884d8" name="Power (kW)" />
            </LineChart>
          </ChartContainer>
        </div>
      );
    }

    if (type === 'cooling') {
      return (
        <div className="grid grid-cols-2 gap-4 mt-4">
          <ChartContainer title="Temperature History">
            <LineChart width={280} height={220} data={data.history}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="time" />
              <YAxis />
              <Tooltip />
              <Line type="monotone" dataKey="temp" stroke="#8884d8" name="Temperature" />
              <Line type="monotone" dataKey="humidity" stroke="#82ca9d" name="Humidity" />
            </LineChart>
          </ChartContainer>
          <div className="bg-white p-4 rounded-lg border">
            <h3 className="text-lg font-semibold mb-4">CRAC Units Status</h3>
            <div className="space-y-3">
              {data.units.map(unit => (
                <div key={unit.id} className="flex justify-between items-center p-3 bg-gray-50 rounded">
                  <span className="font-medium">Unit {unit.id}</span>
                  <div className="flex gap-6">
                    <span>{unit.temp}Â°F</span>
                    <span>{unit.humidity}%</span>
                    <span className={`px-2 py-1 rounded ${
                      unit.status === 'normal' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                    }`}>
                      {unit.status}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      );
    }

    if (type === 'network') {
      return (
        <div className="grid grid-cols-2 gap-4 mt-4">
          <ChartContainer title="Network Traffic">
            <LineChart width={280} height={220} data={data.traffic}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="time" />
              <YAxis />
              <Tooltip />
              <Line type="monotone" dataKey="in" stroke="#8884d8" name="In" />
              <Line type="monotone" dataKey="out" stroke="#82ca9d" name="Out" />
            </LineChart>
          </ChartContainer>
          <div className="bg-white p-4 rounded-lg border">
            <h3 className="text-lg font-semibold mb-4">Network Devices</h3>
            <div className="space-y-3">
              {data.devices.map((device, index) => (
                <div key={index} className="flex justify-between items-center p-3 bg-gray-50 rounded">
                  <span className="font-medium">{device.name}</span>
                  <div className="flex gap-6">
                    <span className={`px-2 py-1 rounded ${
                      device.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                    }`}>
                      {device.status}
                    </span>
                    <span>{device.load}%</span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      );
    }

    if (type === 'security') {
      return (
        <div className="grid grid-cols-2 gap-4 mt-4">
          <ChartContainer title="Access Events">
            <BarChart width={280} height={220} data={data.accessEvents}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="time" />
              <YAxis />
              <Tooltip />
              <Bar dataKey="authorized" fill="#82ca9d" name="Authorized" />
              <Bar dataKey="unauthorized" fill="#ff8042" name="Unauthorized" />
            </BarChart>
          </ChartContainer>
          <div className="bg-white p-4 rounded-lg border">
            <h3 className="text-lg font-semibold mb-4">Security Zones</h3>
            <div className="space-y-3">
              {data.zones.map((zone, index) => (
                <div key={index} className="flex justify-between items-center p-3 bg-gray-50 rounded">
                  <span className="font-medium">{zone.name}</span>
                  <div className="flex gap-4">
                    <span className={`px-2 py-1 rounded ${
                      zone.status === 'secure' ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'
                    }`}>
                      {zone.status}
                    </span>
                    <span className="text-gray-500">{zone.lastAccess}</span>
                  </div>
                </div>
              ))}
            </div>
          </div>
          <div className="col-span-2 bg-white p-4 rounded-lg border">
            <h3 className="text-lg font-semibold mb-4">Recent Security Alerts</h3>
            <div className="space-y-3">
              {data.recentAlerts.map(alert => (
                <div key={alert.id} className="flex justify-between items-center p-3 bg-gray-50 rounded">
                  <div className="flex items-center gap-3">
                    <span className={`w-2 h-2 rounded-full ${
                      alert.severity === 'warning' ? 'bg-yellow-400' : 'bg-green-400'
                    }`} />
                    <div>
                      <div className="font-medium">{alert.type}</div>
                      <div className="text-sm text-gray-500">
                        {alert.location} â¢ {alert.user}
                      </div>
                    </div>
                  </div>
                  <span className="text-sm text-gray-500">{alert.time}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      );
    }

    return null;
  };

  return (
    <div className="p-6 max-w-6xl mx-auto space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Data Center Monitoring</h1>
        <div className="flex items-center gap-4">
          <button
            onClick={() => setAutoRefresh(!autoRefresh)}
            className={`p-2 rounded ${autoRefresh ? 'bg-blue-100 text-blue-600' : 'bg-gray-100 text-gray-600'}`}
          >
            <RefreshCcw size={16} className={autoRefresh ? 'animate-spin' : ''} />
          </button>
          <p className="text-gray-500">{currentTime}</p>
        </div>
      </div>

      <Alert>
        <AlertTriangle className="h-4 w-4" />
        <AlertTitle>System Status</AlertTitle>
        <AlertDescription>
          All systems operating within normal parameters. Last check: {currentTime}
        </AlertDescription>
      </Alert>

      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <MetricCard
          icon={Zap}
          title="Power"
          value={metrics.power.current}
          unit="kW"
          status="normal"
          trend="down"
          trendValue="2.5"
        />
        <MetricCard
          icon={ThermometerSun}
          title="Cooling"
          value={metrics.cooling.current}
          unit="Â°F"
          status="warning"
          trend="up"
          trendValue="1.8"
        />
        <MetricCard
          icon={Server
